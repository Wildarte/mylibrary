css is a language we use to style an html element, css describe how html elements should be displayed

Border - CSS

css border properties

the css border properties allow you to specify the style, width, and color of an element's border.

css border-style property specifies what kind of border to display

The following values are allowed:

dotted - Defines a dotted border
dashed - defines a dadhed border
solid - defines a solid border
double - defines a double border
groove - defines a 3D grooved border. The effect depends on the border-color value
ridge - Defines a 3D ridge border. The effect depends on the border-color value
inset - defines a 3d inset border. the effect depends on the border-color value
outset - defines a 3D outset border. The effect depends on the border-color value
outset - defines a 3D outset border. The effect depends on the border-color value
none - defines no border
hidden - defines a hidden border

The border-style property can have from one to four values (for the top border, right border, bottom border, and the left border).

p.dotted{border-style: dotted;}
p.dashed{border-style: dashed;}


css border width

the border-width porperty specifies the width of the four borders.

the width can be as a specific size (in px, pt, cm, em, etc) or by using one of the three pre-defined values: thin, medium, or thick:

examples:

border-width: 5px;
border-width: medium;
border-width: 2px;
border-width: thick;

specific side widths

the border-width property can have from one to four values (fot the top border, right border, bottom border, and the left border):

Example:

css border color

the border-color property is used to set the color of the four borders.
the color can be set by:

css border - individual sides

From the examples on the previous pages, you have seen that it  is possible to specify a different border for each side.

In CSS, there are also properties for specifying each of the borders (top, right, bottom, and left):



CSS Margins

the css margin properties are used to create space around alements, outside of any defined borders.

With CSS, you have full control over the margins. There are properties for setting the margin for each side of an element (top, right, bottom, and left).

Margin - individual sides

css has individual sides

css has properties for specifying the margin for each side of an element:

all the margin properties can have the following values:

auto - the browser calculates the margin
length - specifies a margin in px, pt, cm, etc.
% - specifies a margin in % of the width of the containing element
inherit - specifies that the margin should be inherited from the parent element

Tip: Negative values are allowed.

The auto value
You can set the margin property to auto to horizotally center the element whithin its container.

The element will then take uo the specified width, and remaining space will be split equally between the left and right margins.

The element will then take up the specified width, and the remaining speace will be split equally between the left and right margins.

The inherit value

This example lets the left margin of the <p class="ex1"> element be inherited from the parent element (<div>):

Ex:

Use of the inherit value:

div{
    border: 1px solid red;
    margin-left: 100px;
}

p.ex1{
    margin-left: inherit;
}



Margin collapse

top and bottom margin of elements are sometimes collapsed into a single margin that is equal to the...

css Height/Width

css setting height and width

the height and width properties are used to set the height and width of an element.

The height and width properties do not include padding, borders, ou margins. It sets the height/width of the area inside the padding, border, and margin of the element.

css height and width values

the height and width properties may have the following values:


CSS box model


the css Box Model

all html elements can be considered as boxes. In CSS, the term "box model"is used when talking about design and layout.

the css box model is essentially a box wraps around every html element. it consists of: margins, borders, padding, and the actual content. The image below illustrates the box model:

Explanation of the different parts:

content - the content of the bpx, where text and images appear
padding - clear an area around the content. the padding is transparent
border - a border that goes around the padding and content
margin - clears an area outside the border. the margin is transparent

the box model allows us to add a border around elements, and to define space between elements.

width and height of an elment

in order to set the width and height of an element correctly in all browsers, you need to know how the box model works.

Important: When you set the width and height properties of an element with CSS, you just set the width and height of the content area.


CSS outline

an outline is a line that is drawn around elements, outside the borders, to make the element "stand out".

CSS Outline width

The outline-width property specifies the width of the outline, and can have one of the following values:


thin (typically 1px)
medium (typically 3px
thick (typically 5px)
a specific size (in px, pt, cm, em, etc)

Example:

CSS outline offset

The outline-offset property adds space between an outline and the edge/border od an element. The space between an element and its outline is transparent.

The followinf example specifies an outline 15px outside the border edge:

p{
margin: 30px;
border: 1px solid black;
outline: 1px solid red;
outline-offset: 15px;
}

The following example shows that the space between an element and its outline is transparent:

text-alignment

the text-alignment property is used to set the horizontal alignment of a text.

A text can be left or right aligned, centered, or justified.

The following example show center aligned, and left and right aligned text (left alignment is default direction is left-to-right, and right alignment is default if text


text direction

The direction and unicode-bidi propertires can be used to change the text direction of an element:

p{
direction: rtl;
unicode-bidi: bidi-override;
}


vertical alignment
The vertical-align property sets the vertical alignment of an element.

This example demonstrate how to set the vertical alignment of an image in a text:

text transformation

The text-transformation property is used to specify uppercase and lowercase letters in a text.
it can be used to turn everyhing into uppercase or lowercase letters, or capitalize the first letter of each word:

Text indentation

The text-indent property is used to specify the indentation of the first line of a text:

Ex:

p{
text-indent: 50px;
}

letter spacing

the letter-spacing property is used to specify the space between the characters in a text.
The followig example demonstrates how to increase or decrease the space between characters:

line height

The line-height property is used specify the space between lines:

word spacing

The word-spacing property is used to specify the space between the words in a text.
The following example demonstrates how to increase or decrease the space between words:

Text Shadow

The text-shadow property adds shadow to text.

In its simplest use, you only specify the horizontal shadow (2px) and the vertical shadow (2px):

Ex:

h1{
    text-shadow: 2px 2px;
}

Next, add a color (red) to the shadow:


h1{
    text-shadow: 2px 2px red;
}

Then, add a blur effect(5px) to the shadow:

h1{
    text-shadow: 2px 2px 5px red;
}



CSS Fonts

Font Weight

The font-weight property specifies the weight of a font:

p{
    font-weight: normal;
}


Font Variant

The font-variant property specifies whether or not a text should be displayed in a small-caps font.

In a small-caps font, all lowercase letters are converted to uppercase letters. However, the converted uppercase letters appears in a smaller font size than the original uppercase letter in the text.

Ex:

p{
    font-variant: normal;
}


CSS Google Fonts

If you do not want to use any of the standard fonts in HTML, you can use Google Fonts.
Google Fonts are free to use, and have more than 1000 fonts to choose from.

How to use Google Fonts

Just add a special style sheet link in the <head> section and then refer to the font in the CSS.

Ex:

<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Sofia">


Enabling Font Effects

Google have also enable different font effects that you can use.
First add effect=effectname to the Google API, then add a special class name to the element that is going to use the special effect. The class name always with font-effect - and ends with the effectname.

Ex:

Add the fire effect to the "Sofia" font:

<head>
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Sofia&effect=fire">
<style>
font-family: "Sofia", sans-serif;
font-size: 30px;
}
</style>
</head>
<body>

<h1 class="font-effect-fire">Sofia on Fire</h1>

</body>


CSS Great Font Pairings

Great font pairings are essential to great design.

Font Pairing Rules

Here are some basic rules to create great font pairings:

1. Compliment

It is always safe to find font pairings that complement one another.
A great font combination should harmonize, without too similaar ot too different.

2. Use Font Superfamilies

A font superfamily is a set of fonts designed to work well together. So, using differents fonts whithin the same superfamily is safe.

For example, the Lucida superfamily contains the following fonts: Lucida Sans, Lucida Serif, Lucida Typewriter Sans, Lucida Typerwriter Serif and Lucida Math.

3. Contrast is king

Two fonts that are too similar will often conflict. However, contrast, contrasts, done the right way, brings out the best in each font. Example: Combining serif with sans serif is a well know combination.
A strong superfamily includes both serif and sans serifi variations of the same font (e.g Lucida and Lucida Sans)

4. Choose Only One Boss

One font should be the boss. This establishes a hierarchy for the fonts on your page. This can be achieved by varying the size, weight and color.

One way abreviate of specifies the font is:

p{
    font: italic small-caps bold 12px/30px Georgia, serif;
}


CSS Links

With CSS, links can be styled in different ways.


CSS Layout - The display Property

The display property specifies if/how an element is displayed.

Every html element has a default display value depending on what type of element it is. The default display value for most elements is block or inline.

Block-level Elements

A block-level element always starts on a new line and takes up the full width available (streches out to the left and right as far as it can).

The <div> element is a block-level element.

Example of block-level elements:

Example of block-level elements:

div
h1 - h6
p
form
header
footer
section

inline elements

an inline element does not start on a new and only takes up as much width as necessary.

this is an inline <span> element inside a paragraph.

Examples of inline elements:

span
a
img


Display: none;

display: none; is commonly used with JavaScript to hide and show elements without deleting and recreating them. Take a look at our last example on this page if you wantto know this can be achieved.

The <script> element uses display: none; as default.



Override The Default Display Value

As mentioned, every element has a default display value. However, you can override this.

Changing an inline element to a block element, or vice versa, can be useful for making the page look a specific way, and still follow the web standards.

A common example is making inline <li> elements for horizontal menus:

Note: Setting the display property of an element only changes how the element is displayed, NOT what kind of element it is. So, an inline element with display: block; is not allowed to have other block elements inside it.


The following example displays <span> elements as block elements:

span{
display: block;
}

Hide an Element - display:none or visibility:hidden?

Hiding an element can be done by setting the display property to none. The element will be hidden, and the page will be displayed as if the element is not there:

the difference between display and hidden is 


Max-width

Using width, max-width and margin: auto;

As mentioned in the previous chapter; a block-level element always takes up the full available (streches out to the left and right as far as it can).

Setting the width of a block-level element will prevent it form stretching out to edges of its container. Then, you can set the margins to auto, to horizontally center the element whithin its container. The element will take up the specified width, and the remaining space will be split equally between the two margins:

Note: The problem with the <div> above occours when the browser window is smaller than the width of the element. The browser then adds a horizontal scrollbar to the page.

Using max-width instead, in this situation, will improve the browser's handling of small windows. This is important when making a site usable on small devices:

Tip: Resize the browser window to less than 500px wide, to see difference between the two divs! 



CSS Layout - the position property

The position property specifies the type of positioning method used for an element (static, relative, fixed, absolute or sticky).


The position property

The position property specifies the type of positioning method used for an element.

there are five different positin values:

static
relative
fixed
absolute
sticky


Elements are then positioned using the top, bottom, left, and right properties. However, these properties will not work unless the position property is set first. They also work differently depending on the position value.

position: static;

HTML elements are positioned static by default.

Static positioned elements are not affected by the top, bottom, left, and right properties.

An element with position: static; is not positioned in any special way; it is always positioned according to the normal flow of the page.

Here is the CSS that is used:

position: relative;

An element with position: relative; is positioned relative to its normal position.

Setting the top, right, bottom, and left properties of a relatively-positioned element will cause it to beadjusted away from its normal position. Other content will not be adjusted to fit into any gap left by the element.


position: fixed;

An element with position: fixed; is positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled. The top, right, bottom, and left properties are used to position the element.

A fixed element does not leave a ggap in the page where it would normally have been located.


ex:

p.fixed{
position: fixed;
bottom: 0;
right: 0;
width: 300px;
border: 3px solid #73AD321;
}


position: absolute;

An element with position: absolute; is positioned relative to the nearest positioned ancestor (instead of positioned relative to the viewport, like fixed).

However; if an absolute positioned element has no positioned ancestors, it uses the document body, and moves along with page scrolling.

Note: A "positioned" element is one whose position is anything except static.

With combination absolute and relative position we can one element inside other;

position: sticky;

An element with position: sicky; is positioned based on the user's scroll position.

A sticky element toggles between relative and fixed, depending on the scroll position. It is positioned relative until a given offset position is met in the viewport - then it "sticks" in place (like position: fixed).

Overlapping Elements

When elements are positioned, they can overlap other elements.

The z-index property specifies the stack order of an element (which element should be placed in front of, or behindm the others).

An element can have a position or negative stack order.

Note: if two positioned elements overlap without a z-index specified, the element positioned last in the HTML code will be shoen on top.

Position Text In an Image



CSS layout - Overflow

The CSS overflow property controls what happens to content tha is too big to fit into an area.

The overflow property specifies whether to clip the content or to add scrollbars when the content of an element is too big to fit in the specified area.

The overflow property has the following values:

 - visible - default. the overflow is not clipped. The content renders outside  the element's box
 - hidden - the overflow is clipped, and the restof the content will be invisible
 - scroll - the overflow is clipped, and a scrollbar is added to see the rest of the content
 - auto - similar to scroll, but it adds scrollbars only when necessary

note: the overflow property only works for block elements with a specified height.

Note: In OS X Lion (on Mac), scrollbars are hidden by default and only shown when being used (even though "overflow:scroll" is set)

overflow: visible

By default, the overflow is visible, meaning that it is not clipped and it renders outside the elemen's box:

overflow: hidden

with the hidden value, the overflow os clipped, and the rest of the content is hidden:

overflow: scroll

setting the value to scroll, the overflow is clipped and a scrollbar is added to scroll inside the box. Note that this will add a scrollbar both horizontal and vertically (even if you do not need it):


overflow: auto

The auto value is similar to scroll, but it adds scrollbars only when necessary:


overflow-x and overflow-y

The overflow-x and overflow-y properties specifies whether to change the overflow of content just horizontally or vertically (or both):

overflow-x specifies what to do with the left/right edges of the content.
overflow-y specifies what to do with the top/bottom of the content.


CSS Layout - float and clear

The CSS float property specifies how an element should float.
The CSS clear property specifies what elements can float beside the cleared element and on which side.

The float property

the float property is used for positiong and formatting content e.g. let an image float left to the next in a container.

the float property can have one of the following values:

 - left - The element floats to the left of its container
 - right - the element floats to the right of its container
 - none - the element does not float (will be displayed just where it occurs in the text). This is default
 - inherit - The element inherits the float value of its parent

In its simplest use, the float property can be used to wrap text around images.

Example - float: right;

The following example specifies that an image should flat to the right in a text:

((clear and clearfix))

The clear property specifies what elements can float beside the cleared element and on which side.

The clear property can have one of the following values:

 - none - allows floating elements on both sides. This os default
 - left - no floating elements allowed on the left side
 - right - no floating elements allowed on the right side
 - both - no floating elements allowed on either the left or the right side
 - inherit - The element inherits the clear value of its parent

The most common way to use the clear property is after you have used a float property on an element

The most common way to use the clear property is after you have used a float property on an element

The most common way to use the clear property is after you have used a float property on an element
(eu repeti 3x de propósito)

when clearing floats, you should match the clear t the float: if an element is floated to the left, then you should clear to the left. You floated element will continue to float, but the cleared element will appear below it on the web page.

The following example clears the float to the left. Means that no floating elements are allowed on the left side (of the div):

The clearfix hack

if an element is taller than element containing it, and it is floated, it will "overflow" outside of its container

Then we can add overflow: auto; to the containing element to fix this problem:

The overflow: auto clearfix works well as long as you are able keep control of your margins and padding (else you might see scrollbars). The new, modern clearfix hack however, is safer to use, and the following code is used for most webpages.



************************************************
Here is just one anotation about Box Model


All html elements can be considered as boxes. In css, the term "box model" is used when talking about designa and layout.

the css box model is essentially a box that wraps around every html element. it consists of: margins, borders, padding, and the actual content. The image below illustrates the box model:


Explanation of the different parts:

content - the content of the box, where text and immages appear
padding - clear an area around the content. the padding is transparent
border - a border that goes around the padding and content
margin - clears an area outside the border. the margin is transparent

the box model allows us to add a border around elements, and to define space between elements.


CSS Layout - display: inline-block

The display: inline-block value

compared to display: inline, the major difference is that display: inline-block allows to set a width and height on the element.

Also, with display: inline-block, the top and bottom margins/paddings are respedcted, but with display: inline they are not.

Compared to display: block, the major difference is that display: inline-block does not add a line-break after the element, so the element can sit next to other elements.

The following example shows the different behavior of display: display: inline, display: inline-block and display: blok

CSS Layout - Horizontal & Vertical Align

Center Align Elements

To horizontally center a block element (like div), use margin: auto;

Setting the width of the element will prevent it from stretching out to the edges of its container.

The element will then take up the specified width, and the remaining space will be split equally between the two margins:

Left and Right Align - Using float

Another method for aligning elements is to use the float property:


Center Vertically - Using padding


There are many ways to center an element vetically in CSS. A simple solution is to use top an bottom padding:


Center vetically -using position & transform

if padding and line-height are not options, another solution it to use positioning and the transform property:



CSS Combinators

A combinator is something that explains the relationship between the selectors.

A CSS selector can contain more than one simple selector. Between the simple selectors, we can include a combinator

There are four different combinators in CSS:

 - descendant selector (space)
 - child selector (>)
 - adjacent sibling selector (+)
 - general sibling selector (~)

Descendant Selector

The descendant selector matches all elements that are descendants of a specified element.

The following example selects all <p> elements inside <div> elements:

div p{
background-color yellow;
}


Child Selector (>)

The child selector selects all elements that are the children of a specified element.
The following example selects all <p> elements that are children of a <div> element:

Adjacent Sibling Selector (+)
The adjacent sibling selector is used to select an element that is directly after another specific element.
Sibling elements must have the same parent element, and "adjacent" means "immediately following".








