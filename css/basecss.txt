css is a language we use to style an html element, css describe how html elements should be displayed

Border - CSS

css border properties

the css border properties allow you to specify the style, width, and color of an element's border.

css border-style property specifies what kind of border to display

The following values are allowed:

dotted - Defines a dotted border
dashed - defines a dadhed border
solid - defines a solid border
double - defines a double border
groove - defines a 3D grooved border. The effect depends on the border-color value
ridge - Defines a 3D ridge border. The effect depends on the border-color value
inset - defines a 3d inset border. the effect depends on the border-color value
outset - defines a 3D outset border. The effect depends on the border-color value
outset - defines a 3D outset border. The effect depends on the border-color value
none - defines no border
hidden - defines a hidden border

The border-style property can have from one to four values (for the top border, right border, bottom border, and the left border).

p.dotted{border-style: dotted;}
p.dashed{border-style: dashed;}


css border width

the border-width porperty specifies the width of the four borders.

the width can be as a specific size (in px, pt, cm, em, etc) or by using one of the three pre-defined values: thin, medium, or thick:

examples:

border-width: 5px;
border-width: medium;
border-width: 2px;
border-width: thick;

specific side widths

the border-width property can have from one to four values (fot the top border, right border, bottom border, and the left border):

Example:

css border color

the border-color property is used to set the color of the four borders.
the color can be set by:

css border - individual sides

From the examples on the previous pages, you have seen that it  is possible to specify a different border for each side.

In CSS, there are also properties for specifying each of the borders (top, right, bottom, and left):



CSS Margins

the css margin properties are used to create space around alements, outside of any defined borders.

With CSS, you have full control over the margins. There are properties for setting the margin for each side of an element (top, right, bottom, and left).

Margin - individual sides

css has individual sides

css has properties for specifying the margin for each side of an element:

all the margin properties can have the following values:

auto - the browser calculates the margin
length - specifies a margin in px, pt, cm, etc.
% - specifies a margin in % of the width of the containing element
inherit - specifies that the margin should be inherited from the parent element

Tip: Negative values are allowed.

The auto value
You can set the margin property to auto to horizotally center the element whithin its container.

The element will then take uo the specified width, and remaining space will be split equally between the left and right margins.

The element will then take up the specified width, and the remaining speace will be split equally between the left and right margins.

The inherit value

This example lets the left margin of the <p class="ex1"> element be inherited from the parent element (<div>):

Ex:

Use of the inherit value:

div{
    border: 1px solid red;
    margin-left: 100px;
}

p.ex1{
    margin-left: inherit;
}



Margin collapse

top and bottom margin of elements are sometimes collapsed into a single margin that is equal to the...

css Height/Width

css setting height and width

the height and width properties are used to set the height and width of an element.

The height and width properties do not include padding, borders, ou margins. It sets the height/width of the area inside the padding, border, and margin of the element.

css height and width values

the height and width properties may have the following values:


CSS box model


the css Box Model

all html elements can be considered as boxes. In CSS, the term "box model"is used when talking about design and layout.

the css box model is essentially a box wraps around every html element. it consists of: margins, borders, padding, and the actual content. The image below illustrates the box model:

Explanation of the different parts:

content - the content of the bpx, where text and images appear
padding - clear an area around the content. the padding is transparent
border - a border that goes around the padding and content
margin - clears an area outside the border. the margin is transparent

the box model allows us to add a border around elements, and to define space between elements.

width and height of an elment

in order to set the width and height of an element correctly in all browsers, you need to know how the box model works.

Important: When you set the width and height properties of an element with CSS, you just set the width and height of the content area.


CSS outline

an outline is a line that is drawn around elements, outside the borders, to make the element "stand out".

CSS Outline width

The outline-width property specifies the width of the outline, and can have one of the following values:


thin (typically 1px)
medium (typically 3px
thick (typically 5px)
a specific size (in px, pt, cm, em, etc)

Example:

CSS outline offset

The outline-offset property adds space between an outline and the edge/border od an element. The space between an element and its outline is transparent.

The followinf example specifies an outline 15px outside the border edge:

p{
margin: 30px;
border: 1px solid black;
outline: 1px solid red;
outline-offset: 15px;
}

The following example shows that the space between an element and its outline is transparent:

text-alignment

the text-alignment property is used to set the horizontal alignment of a text.

A text can be left or right aligned, centered, or justified.

The following example show center aligned, and left and right aligned text (left alignment is default direction is left-to-right, and right alignment is default if text


text direction

The direction and unicode-bidi propertires can be used to change the text direction of an element:

p{
direction: rtl;
unicode-bidi: bidi-override;
}


vertical alignment
The vertical-align property sets the vertical alignment of an element.

This example demonstrate how to set the vertical alignment of an image in a text:

text transformation

The text-transformation property is used to specify uppercase and lowercase letters in a text.
it can be used to turn everyhing into uppercase or lowercase letters, or capitalize the first letter of each word:

Text indentation

The text-indent property is used to specify the indentation of the first line of a text:

Ex:

p{
text-indent: 50px;
}

letter spacing

the letter-spacing property is used to specify the space between the characters in a text.
The followig example demonstrates how to increase or decrease the space between characters:

line height

The line-height property is used specify the space between lines:

word spacing

The word-spacing property is used to specify the space between the words in a text.
The following example demonstrates how to increase or decrease the space between words:

Text Shadow

The text-shadow property adds shadow to text.

In its simplest use, you only specify the horizontal shadow (2px) and the vertical shadow (2px):

Ex:

h1{
    text-shadow: 2px 2px;
}

Next, add a color (red) to the shadow:


h1{
    text-shadow: 2px 2px red;
}

Then, add a blur effect(5px) to the shadow:

h1{
    text-shadow: 2px 2px 5px red;
}



CSS Fonts

Font Weight

The font-weight property specifies the weight of a font:

p{
    font-weight: normal;
}


Font Variant

The font-variant property specifies whether or not a text should be displayed in a small-caps font.

In a small-caps font, all lowercase letters are converted to uppercase letters. However, the converted uppercase letters appears in a smaller font size than the original uppercase letter in the text.

Ex:

p{
    font-variant: normal;
}


CSS Google Fonts

If you do not want to use any of the standard fonts in HTML, you can use Google Fonts.
Google Fonts are free to use, and have more than 1000 fonts to choose from.

How to use Google Fonts

Just add a special style sheet link in the <head> section and then refer to the font in the CSS.

Ex:

<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Sofia">


Enabling Font Effects

Google have also enable different font effects that you can use.
First add effect=effectname to the Google API, then add a special class name to the element that is going to use the special effect. The class name always with font-effect - and ends with the effectname.

Ex:

Add the fire effect to the "Sofia" font:

<head>
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Sofia&effect=fire">
<style>
font-family: "Sofia", sans-serif;
font-size: 30px;
}
</style>
</head>
<body>

<h1 class="font-effect-fire">Sofia on Fire</h1>

</body>


CSS Great Font Pairings

Great font pairings are essential to great design.

Font Pairing Rules

Here are some basic rules to create great font pairings:

1. Compliment

It is always safe to find font pairings that complement one another.
A great font combination should harmonize, without too similaar ot too different.

2. Use Font Superfamilies

A font superfamily is a set of fonts designed to work well together. So, using differents fonts whithin the same superfamily is safe.

For example, the Lucida superfamily contains the following fonts: Lucida Sans, Lucida Serif, Lucida Typewriter Sans, Lucida Typerwriter Serif and Lucida Math.

3. Contrast is king

Two fonts that are too similar will often conflict. However, contrast, contrasts, done the right way, brings out the best in each font. Example: Combining serif with sans serif is a well know combination.
A strong superfamily includes both serif and sans serifi variations of the same font (e.g Lucida and Lucida Sans)

4. Choose Only One Boss

One font should be the boss. This establishes a hierarchy for the fonts on your page. This can be achieved by varying the size, weight and color.

One way abreviate of specifies the font is:

p{
    font: italic small-caps bold 12px/30px Georgia, serif;
}


CSS Icons
