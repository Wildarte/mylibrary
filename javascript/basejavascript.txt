JavaScript Tutorial

javascript os the world's most popular programming language
Javascript is the programming language of the web.
javascript is easy to learn
this tutorial will teach you javascript from basic to advanced.

Why study javascript?

javascript is one of the 3 languages all web developers must learn:

html, css, javascript


JavaScript Output

Javscript Dsiplay Possibilities

javascript can "display" data in different ways:


writing into an html element, using innerHTML.
writing into the html output using document.write()
writing into an alert box, using window.alert().
writing into the browser console, using console.log()

using innerHTML

to access an html element, ajvascript can use the document.getElementBYId() method.
the id attriute defines the html element. the innerHTML property defines the html content:

using window.alert()

window.alert()

IN javascript, the window object is the global scope object, that means that variables, properties, and methods by default belong to the window object. This also means that specifying the window keyword is optional



JS comments

javascript comments can e used to explain javascript code, and to make it more readble.
javascript comments can also be used to prevent execution, when testing alternative code.

single line comments

single line comments star with //
Any text between // and the endof the line will be ignored by javascript (will not be executed).
This example uses a single-line comment before each code line:


Multi-line comments

multi-line comments start with /* and end with */

Any between /* and */ will be ignored by javascript

This example uses a multi-line comment (a comment block) to explain the code:

Using comments to prevent execution


Using comments to prevent execution od code is suitable for code testing

Adding //in front of a code line changes the code lines from an executable line to a comment.

This example uses // to prevent of one of the code lines.



JavaScript Variables

JavaScript variables are containers for storing data values.

In this example, x, y, and , are variables, declared with the var keyword:


Examples:

var x = 5;
var y = 6;
var z = x + y;



From the example above, you can expect:

 - x stores the value 5
 - y stores the value 6
 - z stores the value 11


Using let and const (2015)

Before 2015, using the var keyword was the only way to declare a javascript variable.

the 2015 version of javascript (ES6 -ECMAScript 2015) allows the use of the const keyword to define a variable that cannot be reassined, and the let keyword to define a variable with restricted scope.

Because it is a little complicated to describe the difference between these keyword, and because they are not supported in older browsers, the first part of this tutorial will most often use var.


Much like algebra

In this example, price1, price2, and total, are variables:

In programming, just like in algebra, we use variables (like price1) to hold values.
in programming, just like in algebra, we use variables in expressions (total = price1 + price2).
From the example above, you can calculate the total to be 11.

All Javascript variables must be identified woth unique names.
these unique names are called identifiers.
identifiers can be short names (like x and y) or more descriptive names (age, sum, totalValue)

The general rules for constructing names for variables (unique identifiers) are:

 - Names can contain letters, digits, underscores, and dollar signs.
 - Names must begin with a letter
 - Names can also begin with $ and _(but we will not use it in this tutorial)
 - Names are case sensitive (y and Y are differents variables)
 - Reserved words (like JavaScript keywords) cannot be used as names



JavaScript identifiers are case-sensitive.


The Assignment Operator

In JavaScript, the equal sign (=) is an "assignment" Operator, not "equal to" operator.

This is different from algebra. The following does not make sense in algebra.


value = undefined

In computer programs, variables are often declared without a value. The value can be something that has to be calculated, or something that will be provided later, like user input.

A variable declared without a value will have the value undefined.

The variable carName will have the value undefined after the execution off this statement:


Re-Declaring JavaScript Variables

If you re-declared a JavaScript variable, it will not lose its value.

The variable carName will still have the value "Volvo" after the execution os these statements:



JavaScript Dollar Sign $

Remember that JavaScript identifiers (names) must begin with:


 - A letter (A-Z or a-z)
 - A dollar sign ($)
 - Or an underscore (_)


Since JavaScript treats a dollar sign as a letter, identifers containing $ are valid variable names:




JavaScript Underscore (_)

Since JavaScript treats underscore as a letter, identifiers containing_ are valid variable names:



JavaScript Arithmetic



JavaScript Arithmetic Operators

Arithmetic operators perform arithmetic on numbers (literals or variables)


Exponentiation

The exponentiation operator (**) raises the first operand to the power of the power off the second operand.


var x = 5;
var z = x ** 2;

x ** y produces the same result as Math.pow(x,y);


JavaScript evaluates expressions from left to right. Different sequences can produce different results:


Ex:

var x = 16 + 4 + "Volvo";

Result:

20Volvo

Another example:

var x = "Volvo" + 16 + 4;

Result:
Volvo164



JavaScript Types are Dynamic

Javacript has dynamic type. This means that the same variable can be used to hold different data types:

var x;
x = 5;
x = "John";


JavaScript Numbers

JavaScript has onl one type of numbers

Numbers can be written with, or without decimals:

var x1 = 34.00;
var x2 = 34;


Extra large or extra small numbers can be written with scientic (exponential)notation:



var y = 123e5;
var z = 123e-5;



JavaScript Arrays

JavaScript arrays are written with square brackets.

Array items are separated by commas.

The following code declares (creates) an array called cars, containg three items(car names)


Ex:

var cars = ["Saab", "Volvo", "BMW"]

JavaScript Objects

JavaScipr objects re written with curly braces {}
Object properties are written as name value pairs, separated by commas.


Ex:


var person = {firstName: "John", lastName: "Doe", age: 50, eyeColor: "blue"}


Diffrerence Between undefined and null

undefined and null are equal in value but different in type:



typeof undefined    //undefined
typeof null         //object

null === undefined  //false
null == undefined   //true




Primitive Data

A primitive data value is a single data value with no additional properties and methods.

The typeof operator can return one of these primitive types:

string
number
boolean
undefined


Complex Data

The typeof operator can return one of two complex types:

function
object

The typeof operator returns "object" for objects, arrays, and null.
The typeof operator does not return "object" for functions.



JavaScript Objects


Real life objects, properties, and methods

in real life, a car is an object

a car has properties like weight and color, and methodslike start and stop:



All cars have the same properties, but the property values differ from car to car.

All cars have the same methods, but the methods are performed at different times.


JavaScript Objects


You have already learned that JavaScript variables are containers for data values.
This code assigns a somple value (Fiat) to a variable named car:

var car = "Fiat";


Objects are variables too. But objects can contain many values.

This code assigns many values (Fiat, 500 white) to a variable named car

var car = {type: "Fiat", model: "500", color: "white"};




Object Deinition

You define (and create) a JavaScript object with an object literal:

Ex:

Spaces and line breaks are not important. An object definition can span multiple lines:


var person = {
	firstName: "John",
	lastName: "Doe",
	age: 50,
	eyeColor: "blue"
};


Object Properties

The name:values pairs in JavaScript objects are called properties:



Accessing object properties

you can access object properties in two ways:

objectName.propertieName

or

objectName["propertyName"]


Object Methods

object can also have methods

methods are actions that can be performed on obejects

methods are stored in properties as function definitions.


A methods is a function stored as a property



The this keyword


In a function definition, this refers to the "owner" of the function.
In the example above, this is the person object that "owns" the fullName function.
In other word, this.firstName means the firstName property of this object


Accessing Object Methods

You access an object method with the following syntax:

objectName.methodName()


name = person.fullName()


JavaScript Events


html events are "things" that happen to html elements.


when javascript is used in html pages, javascript can "react" on these events.


html events


an html events can be somethings the browser does, or something a user does.

here are some examples of html events:

 - an html web page has finished loading
 - an html input field was changed
 - an html button was clicked


often, when events happen, you may want to do something.

javascript lets you execute code when events are detected.

html allows event handler attributes, with javascript code, to be added to html elements.

with single quotes:

<element event='some javascript'>

with double quotes

<element event="some javascript">

in the following example, an onclick attribute (with code), is added to a <button> element:


<button onclick="document.getElementById('demo').innerHTML = Date()">The time?</button>

in the example above, the javascript cde changes the content of the element with id="demo".

in the next example, the code changes the content of its own element (using this.innerHTML)


JavaScript code is often several lines long. it is more common to see event attributes calling functions:



Commen html events

here is a list of some common html events:

onchange = an html element has been changed
onclick = the user clicks an html element
onmouseover = the user moves the mouse over an html element
onmouseout = the user moves the mouse away from an html element
onkeydown = the user pushes a keyboard key
onload = the browser has finished loading the page


What can JavaScript Do?

Event handlers can be used to handle and verify user input, user actions, and browser actions:

 - things that should be done every time a page loads
 - things that should be done when the page is closed
 - action that should be performed when a user clicks a button
 - content that should be verified when a user inputs data
 - and more...

Many different methods can be used to let javascript work with events:

 - html event attributs can execute javascript code directly
 - html event attributs can call javascript functions
 - you can assign your own event handler functions to html elements
 - you can prevent events from being sent or being handler
 - and more...



JavaScript Strings

javascript strings are used for storing and manipulating text.

javascript strings

a javascript string is zero or more characters written inside quotes

var x = "john Doe";


you can use single or double quotes:

you can use quotes inside a string, as long as theu don't match the quotes surrounding the string:

string length

to find the length of a string, use the built-in length property:



Escape Character

because strings must be written whithin quotes, javascript will misunderstand this sring:

var x = "we are the so-called "Vikings" from the north.";


The string will be chopped to "We are the so-called".

The solution to avoid this problem, is to use the backslash escape character.

The backslash (\) escape character turns special characters into string characters:

the sequence \" inserts a double quote in a string:


Example:

var x = "We are the so-called \"Vikings\" from the north.";



braking ling code lines

for best readability, programmers often like to avoid code lines longer than 80 characters.

if a javascript statement does not fit on one line, the best place to break it is after an operator:



Strings can be objects


Normally, JavaScript strings are primitive values, create from literals:

var firstName = "John";


But string can also be defined as obejects with the keyword new:

var firstName = new String("john");

the first example is a string, the second is an object.


Don't create strings as objects. It slows down execution speed.
The new keyword complicates the code. This can produce some unexpected results:


String Methods

let str = "5";
str = str.padStart(4,0);
// result is 0005


let str = "5";
str = str.padEnd(4,0);
// result is 5000



The charAt() method

The charAt() methods returns the character at a specified index (position) in a string:

var str = "Hello World";
str.charAt(0);
// returns H


The charCodeAt() method

The charCodeAt() method returns the unicode of the character at a specified index in a string:

The method returns a UTF-16 code (an integer between 0 and 65535).


var str = "HELLO WORLD";
str.charCodeAt(0);
//returns 72


Converting a String to an Array

A string can be converted to an array with the split() method:

var txt = "a,b,c,d,e";
txt.split(",");
txt.split(" ");
txt.split("|");



JavaScript Numbers

javascript has only one type of number. Numbers can be written with or without decimals


JavaScript Numbers are Always 64-bit Floating Point

unlike many other programming languages, JavaScript does not define different types of numbers, like integers, short, long, floating-point etc.

JavaScript numbes are always stored as double precision floating pint numbers, following the international IEEE 754 standard.

This format stores numbers in 64 bits, where the number (the fraction) is stored in bits 0 to 51, the exponent in bits 52 to 62, and the sign in bit 63:


Precision

Integers (numbers without a period or exponent notation) are accurate up to 15 digits.

The maximum number of decimals is 17, but floating point arithmetic is not always 100% accurate:


var x = 0.2 + 0.1;    //x will be 0.300000000000000004


to solve the problem above, it helps to multiply and divide:


var x = (0.2 * 10 + 0.1 *) / 10;


Adding numbers and strings


warning

javascript uses the + operator for both addition and concatenation

numbers are added. Strings are concatenated.


If you add two numbers, the result will be a number:


Javascript interpreter works from left to right
first 10 + 20 is added because x and y are both numbers
Then 30 + "30" is concatenated because z is a string.



Javascript will try convert strings to numbers in all numeric operations:

this will work:


var x = "100";
var y = "10";
var z = x / y;

this return 10

the same with * and -



But this will not work:

var x = "100";
var y = "10";
var z = x + y;
z will not be 110, it will be 10010


NaN - Not a Number


NaN is a javascript reserved word indicating that a number is not a legal number.

Trying to d arithmetic with a non-numeric string will return in NaN (Not a Number):


you can use the global javascript function isNaN() to find out if a value is a number:


var x = 100 / "100";
isNaN(x);  //returns true because x is Not a Number

watch out for NaN. If you NaN in a mathematical operation, the result will also be NaN:


var x = NaN;
var y = 5;
var z = x + y;		//z will be NaN



or the result might be a concatenation:

var x = NaN;
var y = "5";
var z = x + y;		//z will be NaN5


NaN is a number: typeof NaN returns number:


typeof NaN;		//returns "number"



Infinity

Infinity (or -Infinity) is the value JavaScript will return if you calculate a number outside the largest possible number.


var myNumber = 2;
while(myNumber != Infinity){		//Execute until Infinity
	myNumber = myNumber * myNumber;
}


Infinity is a number: typeof Infinity returns number


typeof Infinity;		//returns "number"


Hexadecimal

javascript interprets numeric constants as hexadecimal if they are preceded by 0x

never write a number with a leading zero (like 07)
seome javascript versions interpret numbers as octal if they are written a leading zero.


By default, javascript display numbers as base 10 decimals.
but you can use the toString() method to output numbers from base 2 to base 36.
hexadecimal is base 16. Decimal is base 10, Octal is base 8. Binary is base 2.


Numbers can be objects

normally javascript numbers are primitive values created from literals:

var x = 123;

but numbers can also be defined as objects with keyword new:


Ex:

var y = new Number(123);


//when to use typeof will be returned a object


dont create number objects. It slows down execution speed.
the new keyword complicates the code. This can produce some unexpected results:

when using the == operator, equal numbers are equal;

whe using the === operator, equal numbers are not equal, because the === operator expects equality in both type and value


or oven worse. Objects cannot be compared:

objects cannot be compared


Javascript number methods

number mehods help you work with numbers.


Number methods help you work with numbers.

Primitive values (like 3.14 or 2014), cannot have properties and methods (because they are not objects).

But with JavaScript, methods and properties are also available to primitive values, because javascript trats primitive values as objects execution methods and proerties.


The toString() method returns a number as a string
All number methods can be used on any type of number (literals, variables, or expressions):


The toExponential() method

toExponential() returns a string, with a number rounded and written using exponential notation.
A paramter defines the number of characters behind the decimal point:


Example:

var x = 9.656;
x.toExponential(2);  //returns 9.66e+0
x.toExponential(4);  //returns 9.6560e+0
x.toExponential(6);  //returns 9.656000e+0


The toFixed() method

toFixed() returns a string, with the number written with a specified number of decimals:

The toPrecision() method

toPrecision() return a string, with a number written with a specified length:

var x = 9.656;
x.toPrecision();      //returns 9.656;

The valueOf() method

valueOf() returns a number as a number


All javascript data types have a valueOf() and a toString() method


Converting variables to Numbers

there are 3 javascript methods that can be used to convert variables to numbers:

the Number() method
the parseInt() method
the parseFloat() method

these methods are not number method, but global javascript mehtods


Global JavaScript Methods

Javascript global methods can be used on all javascript data types.

these are the most relevant mthods, when working with numbers:


the Number() method


Number() can be used to convert JavaScript variables to numbers:


Example

Number(true);    //returns 1
Number(false);   //returns 0
Number("10");    //returns 10
Number("   10"); //returns 10
Number("10  ");  //returns 10
Number("10.33"); //returns 10.33
Number("10,33"); //returns NaN
Number("10 33"); //returns NaN
Number("John");  //returns NaN



if the number cannot be converted, NaN (Not a Number) is returned.


The Number() method used on dates

Number() can also convert a date to a number:

Ex:
Number(new Date("2017-09-30"));    //returns 1506729600000



JavaScript MIN_VALUE and MAX_VALUE

MAX_VALUE returns the largest possible number in javascript


var x = Number.MAX_VALUE;


MIN_VALUE returns the lowest possible number in JavaScript



Javascript POSITIVE_INFINITY

var x = Number.POSITIVE_INFINITY;

POSITIVE_INFINITY is returned on overflow:




Javacript NEGATIVE_INFINITY

NEGATIVE_INFINITY is returned on overflow:


JavaScript NaN - Not a Number



Arrays


Javascript arrays are used to store multiple values in a single variable.


var cars = ["Saab", "Volvo", "BMW"];


What is an Array?

An array a special variable, which can hold more than one value at a time.

if you have a list of items (a list of car names, for example), storing the cars in single variables could look like this:


var car1 = "Saab";
var car2 = "Volvo";
var car3 = "BMW";


however, what if you to loop through the cars and find a specific one? and what if you had not 3 cars, but 300?

The solution is an array!

An array can hold many values under a single name, and you can access the values by refering to an index number.


Creating an Array

Using an array literal is the easist way to create a JavaScript Array

Syntax:

var array_name = [item1, item2, ...]


spaces and line breaks are not important. A declaration can span multiple lines:


var cars= [
  "Saab",
  "Volvo",
  "BMW"
];



Using the javascript keyword new

the following example also creates an Array, and assigns values to it:


var cars = new Array("Saab", "Volvo", "BMW");


The two examples above do exactly the same. There is no need to use new Array().
Forsimplicity, readability and execution speed, use the first one (the array literal method).


Access the Elements of an Array


You access an array element by referring to the index number.

This statement accesses the value of the first element in cars:
var name  cars[0];


Note: Array indexes start with 0.


[0] is the first element. [1] is the second element.



CHanging an Array Element

This statement changes the value of the first element in cars:


cars[0] = "Opel";

Access the Full Array

with javascript, the full array can be accessd by referring to the array name:

var cars = ["Saab", "Volvo", "BMW"];
document.getElementById("demo").innerHTML = cars;



Arrays are objects

arrays are a special type of objects. The typeof operator in javascript returns "object" for arrays.
But, JavaScript arra are best described as arrays.
Arrays use numbers to access ots "elements". In this example, person[0] returns John:


Objects use names to access its "members". In the example, person.firstName returns John:


var person = {firstName: "John", lastName: "Doe", age:46};


Array Elements Can be objects

JavaScript variables can be objects. Arrays are special kinds of objecs

because of this, you can have variables of different types in the same Array.

You can have objects in an Array. You can have functions in an Array. You can have arrays in an Array:


myArray[0] = Data.now;
myArray[1] = myFunction;
myArray[2] = myCars;



Arrays Propertires and Methods

The real strength of javascript array are the built-in array properties and methods:

var x = cars.length;

var y = cars.sort();


Array methods are covered in the next chapters.


The length Property

The length property of an array returns the length of an array (the number of array elements).

var first = fruits[0];


Accessing the last Array Element

fruits = ["Banana", "Orange", "Apple", "Mango"];
var last = fruits[fruits.length - 1];


Looping Array elements

the safest way to loop through an array, is using a for loop:



var fruits, text, fLen, i;

fruits = ["Banane", "Apple", "Kiwi"];

fLen = fruits.length;


text = "<ul>";
for(i = 0; i < fLen; i++){
	text += "<li>" + fruits[i] + "</li>";
}

text += "</ul>";


yo can also use the Array.forEach() function:


var fruits, text;

fruits = ["Banana", "Orange", "Apple", "Mango"];

text = "<ul>";
fruits.forEach(myFunction);
text += "</ul>";

function myFunction(value){
	text += "<li>" + value + "</li>";
}

Adding Array Elements

The easiest way to add a new element to an array is using the push() method:

example:

var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits[fruits.length] = "Lemon";


WARNING !

Adding elements with high indexes can create undefined "holes" in an array:

var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits[6] = "Lemon";


Associative Arrays

Many programming languages support arrays with named indexes.

Arrays with named indexes are called associative arrays (or hashes).

JavaScript does not support arrays with named indexes.

In JavScript, arrays always use numbered indexes.


Warning!!
If you use named indexes, JavaScript will redefine the array to a standard object.
After that, some array methods and properties will produce incorrect results.


The difference between Arrays and Objects


In JavaScript, arrays use numbered indexes.

In JavaScript, objects use named indexes.



Arrays are a special kind of objects, with numbered indexes.

When to use arrays. When to use objects.

JavaScript does not support associativee arrays.
You should use object when you want the element names to be strings(text).
You should use arrays when you want the element names to be numbers.


Avoid new Array()


There is no need to use the javascrit's built-in aray constructor new Array().

Use [] instead.


These two different statements both create a new empty named points:

These two different statements both create a new array containing 6 numbers:



How to Recognize an Array

A common question is: How do I know if a variable is an array?

The problem is that tha javascript operator typeof returns "object":

var fruits = ["banana","orange","apple","mango"];
typeof fruits; //returns object


the typeof operator returns object because a javascript array is an object.

solution 1:

to solve this problem ECMAScript 5 defines a new method Array.isArray():

Array.isArray(fruits);


javascript array methods


converting arrays to strings


the javascript method toString() converts an array to a string of (comma separated) array values.


var  fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits.toString();



The join() method also joins all array elements into a string.

It behaves just like toString(), but in addition you can specify the separator:

var fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits.join(" * ");



Popping and Pushing

when you work with arrays, it is easy to remove elements and add new elements.
This is what popping and pushing is:

Popping items out of an array, or pushing items into an array.


Popping

The pop() mehod removes the last element from an array:

var fruits = ["banana", orange", "apple", "mango"];
fruits.pop();     //remove the last element ("mango") from fruits


th pop() method returns the value that was "popped out":

var fruits = ["banana","apple","orange"];
var x = fruits.pop();   //the value of x is "orange"



pushing

the push() method adda new element to an array (at the end):

var fruits = ["banana", "orange", "apple", "mango"];
fruits.push("kiwi");     //adds a new element ("kiwi") to fruits

the push() method returns the new array length:


Shifting Elements

Shifting is equivalent to popping, working on the first element instead of the last.
The Shift() method remves the first array element and "shifts" all other elements to a lower index.


var fruits = ["banana", "orange", "apple", "mango"];
fruits.shift();			//removes the first element "banana" from fruits

The fruits = ["banana", "orange", "apple", "mango"];
var x = fruits.shift();		//the value of x is "banana"


The unshift() method adds a new element to an array (at the beginning), and "unshifts" older elements:

var fruits = ["banana", "orange", "apple", "mango"];
fruits.unshift("Lemon");	//adds a new element "Lemon to fruits


The unshift() method returns the new array length



Changing Elements

Array elements are accessed using their index number:

Array indexes start with 0. [0] is the first array element,[1] is the second, [2] is the third


Deleting Elements

Since javascript arrays are objects, elements can be deleted by using the javascript operator delete


var fruits = ["banan", "apple", "orange"];
delete fruits[0];	//changes the first element in fruits to undefined



using delete may leave undefined holes in the array. use pop() or shift() instead.



Splicing an Array

The splice() method can be used to add new items to an array:

var fruits = ["banana", "orange", "apple"];
fruits.splive(2,0, "Lemon", "Kiwi");

the first parameter (2) defines the position where new elements should be added (spliced in).
the second parameter (0) defines how many elements should be removed
the rest of parameters ("Lemon", "Kiwi") define the new elements to be added.
the splice() method returns an array with the deleted items



Using splice() to Remove Elements

Which clever parameter setting, you can use splice() to remove elements without leaving "holes" in the array:

var fruits = ["banana", "orange", "apple"];
fruits.splice(0, 1);


The first parameter (0) defines the position where new elements should be added(splice in)
The second parameter (1) defines how many elements should be removed.
The rest of the parameters are omitted. No new elements will be added.


Merging (concatenating) arrays

The concat() method creates a new array by merging (concatenating) existing arrays:

Example (merging two arrays)


var myGirls = ["Cecilie", "Lone"];
var myBoys = ["Emil", "Tobias", "Linus"];
var myChildren = myGirls.concat(myBoys);	//Concatenates (joins) myGirls and myBoys


The concat() method does not change the existing arrays. It always returns a new array.

The concat() method can take any number of array arguments:

Example (Merging Three Arrays)

var arr1 = ["Cecilie", "Lone"];
var arr2 = ["Emil", "Tobias", "Linus"];
var arr3 = ["Robin", "Morgan"];
var myChildren = arr1.concat(arr2, arr3);	//concatenates arr1, arr2, and arr3


Slicing an Array

The slice() method slices out a piece of an array into a new array.
This example slices out a part of an array starting array element 1 ("Orange").


The slice() method creates a new array. It does not remove any elements from the source array.

This example slices out a part of an array starting from array element 3 ("Array")


var fruits = ["banana", "Orange", "Lemon", "Apple", "Mango"];
var citrus = fruits.slice(3);


The slice() method can take two arguments like slice(1, 3).
The method then selects elements from the start argument, and up to (but not including) the end argument.



Automatic toString()

JavaScript automatically converts an array to a comma separated string when a primitive value is expected.
This is always the case when you try to output an array..
These two examples will produce the same result:


All javascrip objects have a toString() method.


javascript sorting arrays


sorting an array

the sort() method sorts an array alphabetically:


Reversing an Array

The reverse() method reverses the elements in an array.
You can use it to sort an array in descending order:


The Compare Function

The purpose of the compare functin is to define an alternative sort order.

The compare function should return a negative, zero, or positive value, depending on the arguments:

function(a, b){return a - b}


When the sort() functio compares two values, it send the values to the compare function, and sorts the value according to the returned (negative, zero, positive) value.

If the result is negative a is sorted before b.
If the result is positive b is sorted before a.

If the result is 0 no changes are done woth the sort order of the two values.



Example:

The compare function compares all the values in the array, two values at a time (a, b).
WHen comparing 40 and 100, the sort() method calls the compare function(40, 100).
The function calculates 40 - 100 (a - b), and since the result is negative (-60), the sort function will sort 40 as a value lower than 100.
You can use this code snippet to experiment with numericcall and alphabetically sorting:



Sorting an Array in Random Order

var points = [40,100,1,5,25,10];
points.sort(function(a,b){return 0.5 - Math.random()});


The fisher Yates Method

The above example, array.sort(), is not accurate, it will favor some numbers over the others.
The most popular correct method, is called the Fisher Yates shuffle, and was introduced in data science as early as 1983!

In JavaScript the method can be translated to this:

var points = [40,100,1,5,25,10];

for(i = points.length -1; i > 0; i--){
	j = Math.floor(Math.random() * i)
	k = points[i]
	points[i] = points[j]
	points[j] = k
}


Find the highest (or lowest) array value

There are no built-in functions for finding the max or min value in an array.
However, after you have sorted an array, you can use the index to obtain the highest and lowest value.



 ** AGORA EU ESTOU ESTUDANDO JAVA SCRIPT COM EXEMPLOS PRÁTICOS **

 ** MAS DEPENDENDO EU DOU UMA ESTUDADA NA PARTE TEÓRICA **


Javacript Errors - Throw and try to catch


The try statement lets you test a block of code for errors

The catch statement lets you handle the error

The throw statement lets you create custom errors

The finally statement leets you execute code, after try and catch, regardless of the result.


Errors will happen!

When executing Javascript code, different errors can occur.

Errors can be coding errors made by the programmer, errors due to wrong input, and other unforeseeable things.


Ex:

in this example we have alert as adddlert to deliberately produce an error:

try{

adddlert("Welcome guest!");

}catch(err){

document.getElementBuId('demo').innerHTML = err.message;

}

javascript catches adddlert as an error, and execute the catch code to handle it.


javascript try and catch

the try statement allowes you to define a block of code be tested for errors while it is being executed.

The catch statement allows you to define a block of code to be executed, if an error occurs in the try block.

The javascrit statement try and catch come in pairs:


try{
 block of code to try
}
catch(err){
 block of code to handle errors
}


javascript throws errors

when an error occurs, javascrit will normally stop and generate an error message.

the technical term for this is: javascript will throw an exception (throw an error).

javascript will actually create error object with properties: name and message


the throw statement

the throw statement allows you to create a custom error

Technically you can throw an exception (throw an error).

The exception can be a javacript string, a number, a boolean or an object:

throw "Too big";

throw 500;


if you use throw together with try and catch, you can control program fow and generate custom error messages.


input validation example

This example examines input. If the value is wrong, an exception (err) is throw.

The execption (err) is caugth by the catch statement and a custom error message is desplayed.




Input Validation Example


This example examines input. If the value is wrong, an exception (err) is thrown.
This exception (err) is caught by the catch statement and a custom error message is displayed:



Javascript Scope


scope determines the accessibility (visiility) of variables.


JavaScript Function Scope

In JavaScript there are two type of scope:

 - local scope
 - global scope

javacript has function scope: Each function creates a new scope.
scope determines the accessibility (visibility) of these variables.
variables defined inside a function are not accessible (visible) from outside the function.

local javascript variables

variables declared within a javascript function, become local to the function.
local variables have function scope: they can only accessed from within the function.


since local variables are only recognized inside their functions, variables with the same name can be used in different functions.

local variables are created when a function starts, and deleted when the function is completed.


Global JavaScript variables

A variable declared outside a function, becomes global
aglobal variable has global scope: All scripts and function on a web page can access it.


javascript variables

in javascript, objects and functions are also variables.

scope determines the accessibility of variables, objects, and functions from different parts of the code.


automatically global

if you assign a value to a variable that has not been declared, it will automatically become a global variable.

This code example will declare a global variabble carName, even if the value is assigned inside a function.



strict mode

all modern browsers support running javascript in "strict mode".
you will learn more about how to use strict mode in a later chapter of this tutorial.

in "strict mode", undeclared variables are not automatically global

Global Variables in html

with javascript, the glbal scope is the complete javascript environment

In html, the global scope is the window object. all global variables belong to the window object.


warning

do not create global variables unless you intend to.
your global variables (or functions) can overwrite window variables (or functions).
any function, including the window object, can overwrite your glbal variables and functions.



The lifetime of javasript variables

the lifetime of a javascript starts when it is declared.

local variables are deleted when the function is completed.

In a browser, global variables are deleted when you close the browser window (or tab).


Function Arguments

Function arguments (parameters) work as local variables inside functions.


JavaScript Hoisting


hoisting is javascript's default behavior of moving declarations to the top.


javascript declarations are hoisted

in javascript, a variable can be declared after it has been used.

in other words; a variable can be used before it has been declared.



JavaScript Use Strict

"use strict"; Defines that javascript code should be executed in "strict mode"


The "use strict" Directive

the use strict directive was new in ECMAScript version 5.
it is not a statement, but a literal expression, ignored by earlier versions of javascript.
the purpose of "use strict" is to indicate that the code should be executed in "strict mode"
